public static String toBase64(Inventory inventory) {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        DataOutputStream dataOutput = new DataOutputStream(outputStream);
        NBTTagList itemList = new NBTTagList();
 
        // Save every element in the list
        for (int i = 0; i < inventory.getSize(); i++) {
            NBTTagCompound outputObject = new NBTTagCompound();
            CraftItemStack craft = getCraftVersion(inventory.getItem(i));
 
            // Convert the item stack to a NBT compound
            if (craft != null) 
                craft.getHandle().save(outputObject);
            itemList.add(outputObject);
        }
 
        // Now save the list
        NBTBase.a(itemList, dataOutput);
 
        // Serialize that array
        return new BigInteger(1, outputStream.toByteArray()).toString(32);
    }
 
    public static Inventory fromBase64(String data) {
        ByteArrayInputStream inputStream = new ByteArrayInputStream(new BigInteger(data, 32).toByteArray());
        NBTTagList itemList = (NBTTagList) NBTBase.b(new DataInputStream(inputStream));
        Inventory inventory = new CraftInventoryCustom(null, itemList.size());
 
        for (int i = 0; i < itemList.size(); i++) {
            NBTTagCompound inputObject = (NBTTagCompound) itemList.get(i);
 
            // IsEmpty
            if (!inputObject.d()) {
                inventory.setItem(i, new CraftItemStack(net.minecraft.server.ItemStack.a(inputObject)));
            }
        }
 
        // Serialize that array
        return inventory;
    }
 
    private static CraftItemStack getCraftVersion(ItemStack stack) {
        if (stack instanceof CraftItemStack)
            return (CraftItemStack) stack;
        else if (stack != null)
            return new CraftItemStack(stack);
        else
            return null;
    }
